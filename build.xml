<project name="phpfw" basedir="." default="build">
    <import file="tests/config/ant_properties.xml"/>
    <property name="toolsdir" value="${phpfw.base}/vendor/bin/"/>
   
    <target name="build" depends="phpunit, phploc-ci, phpcpd-ci, lint">
    </target>
	
    <target name="phpunit" description="Run the unit tests and generate code coverage" depends="prepare, composer">
        <exec executable="${toolsdir}phpunit" failonerror="true" taskname="phpunit">
        	<arg value="-c"/>
            <arg path="${phpfw.base}/phpunit.xml.dist"/>
        </exec>
    </target>

    <target name="download-composer" description="Downloads composer.phar (when it does not exist or is older than 30 days)">
        <tstamp>
            <format property="thirty.days.ago" pattern="MM/dd/yyyy hh:mm aa" offset="-30" unit="day"/>
        </tstamp>
        <delete>
            <fileset dir="${phpfw.base}">
                <include name="composer.phar" />
                <date datetime="${thirty.days.ago}" when="before"/>
            </fileset>
        </delete>

        <get src="https://getcomposer.org/composer.phar" dest="${phpfw.base}/composer.phar" skipexisting="true"/>
    </target>

    <target name="composer" depends="download-composer" description="Install dependencies with Composer">
        <exec executable="${php.bin}" failonerror="true">
            <arg value="composer.phar"/>
            <arg value="update"/>
        </exec>
    </target>

    <target name="phploc-ci"
            unless="phploc.done"
            depends="prepare, composer"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${toolsdir}phploc" taskname="phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${phpfw.base}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${phpfw.base}/build/logs/phploc.xml" />
            <arg path="${phpfw.base}/classes" />
            <arg path="${phpfw.base}/tests" />
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="prepare" description="Prepare for build" depends="clean">
        <mkdir dir="${phpfw.base}/build/coverage"/>
        <mkdir dir="${phpfw.base}/build/logs"/>
    	<mkdir dir="${basedir}/build/pdepend"/>
    </target>
    
    <target name="clean" description="Cleanup build artifacts" >
        <delete dir="${phpfw.base}/build/coverage"/>
        <delete dir="${phpfw.base}/build/logs"/>
    	<delete dir="${basedir}/build/pdepend"/>
        <delete file="${phpfw.base}/composer.lock"/>
    </target>
	
    <target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true" taskname="lint">
        <arg value="-l" />
        
        <fileset dir="${phpfw.base}/classes">
            <include name="**/*.php" />
            <modified />
        </fileset>
        
        <fileset dir="${phpfw.base}/tests">
            <include name="**/*.php" />
            <modified />
        </fileset>
        </apply>
        
        <property name="lint.done" value="true"/>
    </target>
	
    <target name="pdepend" unless="pdepend.done" depends="prepare"
    	   description="Calculate software metrics using PHP_Depend and log result in XML format.">
        <exec executable="${toolsdir}pdepend" taskname="pdepend">
            <arg value="--jdepend-xml=${phpfw.base}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${phpfw.base}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${phpfw.base}/build/pdepend/overview-pyramid.svg" />
            <arg path="${phpfw.base}/classes" />
        </exec>
    
        <property name="pdepend.done" value="true"/>
    </target>
	
    <target name="phpcpd-ci"
             unless="phpcpd.done"
             depends="prepare"
             description="Find duplicate code using PHPCPD and log result in XML format.">
        <exec executable="${toolsdir}phpcpd" taskname="phpcpd">
            <arg value="--log-pmd" />
            <arg path="${phpfw.base}/build/logs/pmd-cpd.xml" />
            <arg path="${phpfw.base}/classes" />
        </exec>
        
        <property name="phpcpd.done" value="true"/>
    </target>
	
</project>