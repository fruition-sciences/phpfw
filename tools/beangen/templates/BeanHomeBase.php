global $descriptor;
echo "<" . "?php";
?>

/*
 * Do not edit this file.
 * This code was automatically generated.
 *
 * Generated on <?php echo date("F j, Y") ?>
 */
                
abstract class <?php echo $descriptor->xml['name'] ?>BeanHomeBase {
<?php if ($descriptor->xml['cache']) { ?>
    private static $cache; // Maps id -> <?php echo $descriptor->xml['name'] ?>Bean

<?php } ?>
    /**
     * Retrieve a <?php echo $descriptor->xml['name'] ?>Bean by id
     * 
     * @param integer $id
     * @return <?php echo $descriptor->xml['name'] ?>Bean
     */
    public static function find($id) {
        $db = Transaction::getInstance()->getDB();
        $sb = new SQLBuilder();
        $sb->selectAll('<?php echo $descriptor->xml['name'] ?>Bean', 't');     
        $sb->filter('t.' . <?php echo $descriptor->xml['name'] ?>Bean::ID . "=?", 'i', $id);
        $stmt = $db->execute($sb);
        $result = $stmt->get_result(); 
        $rs = $db->fetchRow($result);
        $bean = self::create($rs,'t');
        $db->disposeQuery($stmt);
        return $bean;
    }

<?php if ($descriptor->xml['cache']) { ?>
    /**
     * Returns the bean that has the given primary key.
     * This method is available only for beans marked with the 'cache' flag.
     * The 'cache' flag should be used only for beans that represent constants.
     *
     * @param long $id the primary key.
     * @return <?php echo $descriptor->xml['name'] ?>Bean
     */
    public static function get($id) {
        self::getAll();
        if (!isset(self::$cache[$id])) {
            return null;
        }
        return self::$cache[$id];
    }

    public static function getAll() {
        if (isset(self::$cache)) {
            return self::$cache;
        }
        self::$cache = array();
        $beans = self::findAll();
        foreach ($beans as $bean) {
            self::$cache[$bean->getId()] = $bean;
        }
        return array_values(self::$cache);
    }

<?php } ?>
    /**
     * Create a new <?php echo $descriptor->xml['name'] ?>Bean from a result set.
     *
     * @param $rs ResultSet
     * @param $alias String (optional) alias, if fields in the result set have
     *        a predefined prefix (followed by '_').
     * @return <?php echo $descriptor->xml['name'] ?>Bean
     */
    public static function create($rs, $alias='') {
        if (!$rs) {
            return null;
        }
        $bean = new <?php echo $descriptor->xml['name'] ?>Bean();
        $prefix = $alias ? "${alias}_" : "";
        self::populate($bean, $rs, $prefix);
        return $bean;
    }
    
    /**
    *
    * Populate the bean object thanks to the result set.
    *
    * @param <?php echo $descriptor->xml['name'] ?>Bean $bean
    * @param ResultSet $rs
    * @param String $prefix
    */
    public static function populate($bean, $rs, $prefix='') {
<?php
  foreach ($descriptor->xml->field as $field) {
        $extraParams = "";
        switch ($field['type']) {
            case 'long': case 'Boolean':
                $rsMethod = "getLong";
                break;
            case 'id': 
                $rsMethod = "getId";
                break;
            case 'double':
                $rsMethod = "getDouble";
                break;
            case 'GeomPoint':
                $rsMethod = "getPoint";
                break;
            case 'GeomPolygon':
                $rsMethod = "getPolygon";
                break;
            case 'String':
                $rsMethod = "getString";
                break;
            case 'Date':
                $rsMethod = "getDate";
                if (isset($field['timezone'])) {
                    $extraParams = ", '" . $field['timezone'] . "'";
                }
                break;
            case 'time':
                $rsMethod = "getTime";
                break;
            default:
                throw new Exception("Unrecognized data type (in BeanHomeBase.php): " . $field['type']);
        }
?>
        $bean-><?php echo $descriptor->setterName($field) ?>($rs-><?php echo $rsMethod ?>(<?php if($field['type']=="GeomPoint" || $field['type']=="GeomPolygon"){?>'AsText_'  . <?php }?>$prefix . <?php echo $descriptor->xml['name'] . "Bean::" . $descriptor->fieldConstant($field) . $extraParams ?>));
<?php
  }
?>
    }

    public static function findAll($paging=null) {
        $db = Transaction::getInstance()->getDB();
        $beans = array();
        $sb = new SQLBuilder();
        $sb->selectAll('<?php echo $descriptor->xml['name'] ?>Bean', 't');
        $stmt = $db->execute($sb, $paging);
        $result = $stmt->get_result();
        while ($row = $db->fetchRow($result)) {
            $beans[] = self::create($row, 't');
        }
        $db->disposeQuery($stmt);
        return $beans;
    }

    /**
     * Find all beans by any of the given primary keys.
     *
     * @param long[] $ids
     * @param PaginInfo $paging
     * @return <?php echo $descriptor->xml['name'] ?>Bean[]
     */ 
    public static function findAllByIds($ids, $paging=null) {
        if (!$ids) {
            return array();
        }
        $sb = new SQLBuilder();
        $sb->selectAll('<?php echo $descriptor->xml['name'] ?>Bean', 'b');
        $sb->filter('b.' . <?php echo $descriptor->xml['name'] ?>Bean::ID . " in (?)", 'a', $ids);
        $db = Transaction::getInstance()->getDB();
        $stmt = $db->execute($sb, $paging);
        $result = $stmt->get_result();
        $beans = array();
        while ($row = $db->fetchRow($result)) {
            $beans[] = self::create($row, 'b');
        }
        $db->disposeQuery($stmt);
        return $beans;
    }
}